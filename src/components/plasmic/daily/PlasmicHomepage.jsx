/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: arPJ2mTnAS5GNcPYTirhFr
// Component: r7DdHzAofmHi
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import PageLayout from "../../PageLayout"; // plasmic-import: A2ZUyja4uXKy/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: arPJ2mTnAS5GNcPYTirhFr/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: r7DdHzAofmHi/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"homepage"}
      data-plasmic-override={overrides.homepage}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.homepage
      )}
    >
      <PageLayout
        data-plasmic-name={"homepageLayout"}
        data-plasmic-override={overrides.homepageLayout}
        className={classNames("__wab_instance", sty.homepageLayout)}
      >
        <DataCtxReader__>
          {$ctx => (
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              <div
                data-plasmic-name={"promptText"}
                data-plasmic-override={overrides.promptText}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.promptText
                )}
              >
                {"<some text>"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__eFycg)}>
                <div className={classNames(projectcss.all, sty.freeBox__wCr8E)}>
                  <AntdButton
                    data-plasmic-name={"buttonA"}
                    data-plasmic-override={overrides.buttonA}
                    className={classNames("__wab_instance", sty.buttonA)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y6NgX
                      )}
                    >
                      {"A"}
                    </div>
                  </AntdButton>
                  <AntdButton
                    data-plasmic-name={"buttonC"}
                    data-plasmic-override={overrides.buttonC}
                    className={classNames("__wab_instance", sty.buttonC)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8VOnd
                      )}
                    >
                      {"C"}
                    </div>
                  </AntdButton>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__tisQz)}>
                  <AntdButton
                    data-plasmic-name={"buttonB"}
                    data-plasmic-override={overrides.buttonB}
                    className={classNames("__wab_instance", sty.buttonB)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mS4Q
                      )}
                    >
                      {"B"}
                    </div>
                  </AntdButton>
                  <AntdButton
                    data-plasmic-name={"buttonD"}
                    data-plasmic-override={overrides.buttonD}
                    className={classNames("__wab_instance", sty.buttonD)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xPuXf
                      )}
                    >
                      {"D"}
                    </div>
                  </AntdButton>
                </div>
              </div>
            </section>
          )}
        </DataCtxReader__>
      </PageLayout>
    </div>
  );
}

const PlasmicDescendants = {
  homepage: [
    "homepage",
    "homepageLayout",
    "section",
    "promptText",
    "buttonA",
    "buttonC",
    "buttonB",
    "buttonD"
  ],

  homepageLayout: [
    "homepageLayout",
    "section",
    "promptText",
    "buttonA",
    "buttonC",
    "buttonB",
    "buttonD"
  ],

  section: [
    "section",
    "promptText",
    "buttonA",
    "buttonC",
    "buttonB",
    "buttonD"
  ],

  promptText: ["promptText"],
  buttonA: ["buttonA"],
  buttonC: ["buttonC"],
  buttonB: ["buttonB"],
  buttonD: ["buttonD"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "homepage") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("homepage"),
  {
    // Helper components rendering sub-elements
    homepageLayout: makeNodeComponent("homepageLayout"),
    section: makeNodeComponent("section"),
    promptText: makeNodeComponent("promptText"),
    buttonA: makeNodeComponent("buttonA"),
    buttonC: makeNodeComponent("buttonC"),
    buttonB: makeNodeComponent("buttonB"),
    buttonD: makeNodeComponent("buttonD"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
